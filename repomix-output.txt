This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-10T15:10:04.278Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/build.gradle
app/.gitignore
app/proguard-rules.pro
app/src/androidTest/java/com/example/finalproject/ExampleInstrumentedTest.java
app/src/main/AndroidManifest.xml
app/src/main/java/com/example/finalproject/AddSlipActivity.java
app/src/main/java/com/example/finalproject/Constants.java
app/src/main/java/com/example/finalproject/EventsData.java
app/src/main/java/com/example/finalproject/ListAdapter.java
app/src/main/java/com/example/finalproject/MainActivity.java
app/src/main/java/com/example/finalproject/SlipAdapter.java
app/src/main/java/com/example/finalproject/SlipParser.java
app/src/main/java/com/example/finalproject/SlipProcessor.java
app/src/main/java/com/example/finalproject/TransferSlip.java
app/src/main/res/drawable/ic_add.xml
app/src/main/res/drawable/ic_history.xml
app/src/main/res/drawable/ic_home.xml
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/layout/add_transactions.xml
app/src/main/res/layout/card_layout.xml
app/src/main/res/layout/history.xml
app/src/main/res/layout/list_layout.xml
app/src/main/res/menu/bottom_nav_menu.xml
app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi/ic_launcher.xml
app/src/main/res/values/colors.xml
app/src/main/res/values-night/themes.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/test/java/com/example/finalproject/ExampleUnitTest.java
build.gradle
.gitignore
gradle/libs.versions.toml
gradle.properties
gradlew
gradlew.bat
gradle/wrapper/gradle-wrapper.properties
settings.gradle

================================================================
Repository Files
================================================================

================
File: app/build.gradle
================
plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'com.example.finalproject'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.finalproject"
        minSdk 31
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.play.services.mlkit.text.recognition.common
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
}

================
File: app/.gitignore
================
/build

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/src/androidTest/java/com/example/finalproject/ExampleInstrumentedTest.java
================
package com.example.finalproject;

import android.content.Context;

import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.ext.junit.runners.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;

/**
 * Instrumented test, which will execute on an Android device.
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
@RunWith(AndroidJUnit4.class)
public class ExampleInstrumentedTest {
    @Test
    public void useAppContext() {
        // Context of the app under test.
        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
        assertEquals("com.example.finalproject", appContext.getPackageName());
    }
}

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.FinalProject"
        tools:targetApi="31">
        <activity
            android:theme="@style/Theme.AppCompat.Light"
            android:name=".AddSlipActivity"
            android:parentActivityName=".MainActivity"
            android:noHistory="true"
            android:exported="false"/>
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

================
File: app/src/main/java/com/example/finalproject/AddSlipActivity.java
================
package com.example.finalproject;

import static com.example.finalproject.Constants.TABLE_NAME;
import static com.example.finalproject.Constants.TYPE;
import static com.example.finalproject.Constants.IMAGE;
import static com.example.finalproject.Constants.MONEY;
import static com.example.finalproject.Constants.CATEGORY;
import static com.example.finalproject.Constants.DESCRIPTION;
import static com.example.finalproject.Constants.DATE;
import static com.example.finalproject.Constants.TIME;
import static com.example.finalproject.Constants.RECEIVER;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.InputFilter;
import android.text.Spanned;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResult;
import androidx.activity.result.ActivityResultCallback;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import java.io.ByteArrayOutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AddSlipActivity extends AppCompatActivity implements View.OnClickListener {

    DecimalFormat formatter = new DecimalFormat("#,###,###.##");
    private TextView receiverTextView;
    private EditText moneyEditText;
    private Button btnDate;
    private Button btnTime;
    private Spinner spinner;
    private Button submitBtn;
    private EventsData events;
    private EditText descriptionEditText;
    private Uri image_uri;

    private SlipProcessor slipProcessor;
    private Bitmap currentBitmap;
    private boolean isIncome = true;

    Calendar myCalendar = Calendar.getInstance();

    private ImageButton galleryButton;

    ActivityResultLauncher<Intent> activityResultLauncher3 = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            new ActivityResultCallback<ActivityResult>() {
                @Override
                public void onActivityResult(ActivityResult result) {
                    if (result.getResultCode() == Activity.RESULT_OK) {
                        Intent data = result.getData();
                        try {
                            Uri uri = data.getData();
                            currentBitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), uri);
                            galleryButton.setImageBitmap(currentBitmap);

                            processSlipImage();

                        } catch (Exception e) {
                            Log.e("Log", "Error processing image: " + e.getMessage());
                        }
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.add_transactions);

        galleryButton = findViewById(R.id.gallery_btn);
        galleryButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                intent.setType("image/*");
                Intent chooser = Intent.createChooser(intent, "Select photo from...");
                activityResultLauncher3.launch(chooser);
            }
        });

        spinner = findViewById(R.id.type_spinner);
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this, R.array.types_array, android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_list_item_checked);
        spinner.setAdapter(adapter);

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        descriptionEditText = findViewById(R.id.description);
        receiverTextView = findViewById(R.id.receiver);
        moneyEditText = findViewById(R.id.add_money);
        moneyEditText.setFilters(new InputFilter[]{new DecimalDigitsInputFilter(8, 2)});

        slipProcessor = new SlipProcessor();

        btnDate = findViewById(R.id.date_btn);
        btnDate.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                new DatePickerDialog(AddSlipActivity.this, d,
                        myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),
                        myCalendar.get(Calendar.DAY_OF_MONTH)).show();
            }
        });

        btnTime = findViewById(R.id.time_btn);
        btnTime.setOnClickListener(new View.OnClickListener() {
            public  void onClick(View v) {
                new TimePickerDialog(AddSlipActivity.this, t,
                        myCalendar.get(Calendar.HOUR_OF_DAY),
                        myCalendar.get(Calendar.MINUTE), true).show();
            }
        });

        // Set click listeners for cancel buttons
        TextView moneyCancel = findViewById(R.id.money_cancel);
        TextView descriptionCancel = findViewById(R.id.description_cancel);
        TextView dateCancel = findViewById(R.id.date_cancel);
        TextView timeCancel = findViewById(R.id.time_cancel);
        TextView receiverCancel = findViewById(R.id.receiver_cancel);

        moneyCancel.setOnClickListener(this);
        descriptionCancel.setOnClickListener(this);
        dateCancel.setOnClickListener(this);
        timeCancel.setOnClickListener(this);
        receiverCancel.setOnClickListener(this);

        RadioGroup radioGroup = findViewById(R.id.radio_group);
        radioGroup.setOnCheckedChangeListener((group, checkedId) -> {
            if (checkedId == R.id.radio_income) {
                isIncome = true;
            } else if (checkedId == R.id.radio_outcome) {
                isIncome = false;
            }
        });

        submitBtn = findViewById(R.id.submit_btn);
        submitBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                events = new EventsData(AddSlipActivity.this);
                try {
                    // Log the values before saving
                    Log.d("SQLite_Save", "Attempting to save transaction with values:");
                    Log.d("SQLite_Save", "Type (isIncome): " + isIncome);
                    Log.d("SQLite_Save", "Money: " + moneyEditText.getText().toString());
                    Log.d("SQLite_Save", "Category: " + spinner.getSelectedItem().toString());
                    Log.d("SQLite_Save", "Description: " + descriptionEditText.getText().toString());
                    Log.d("SQLite_Save", "Date: " + btnDate.getText().toString());
                    Log.d("SQLite_Save", "Time: " + btnTime.getText().toString());
                    Log.d("SQLite_Save", "Receiver: " + receiverTextView.getText().toString());

                    addEvent();

                    // Log success
                    Log.d("SQLite_Save", "Transaction saved successfully");
                    Toast.makeText(AddSlipActivity.this, "บันทึกข้อมูลสำเร็จ", Toast.LENGTH_SHORT).show();

                } catch (Exception e) {
                    // Log any errors
                    Log.e("SQLite_Save", "Error saving transaction: " + e.getMessage());
                    Toast.makeText(AddSlipActivity.this, "เกิดข้อผิดพลาดในการบันทึก", Toast.LENGTH_SHORT).show();
                } finally {
                    events.close();
                }
            }
        });
    }

    private void addEvent() {
        String imageString = null;

        if (currentBitmap != null) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                currentBitmap.compress(Bitmap.CompressFormat.JPEG, 50, baos);
                byte[] imageBytes = baos.toByteArray();
                imageString = Base64.encodeToString(imageBytes, Base64.DEFAULT);
                Log.d("SQLite_Save", "Image encoded successfully");
            } catch (Exception e) {
                Log.e("SQLite_Save", "Error encoding image: " + e.getMessage());
            }
        }

        SQLiteDatabase db = events.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(TYPE, isIncome ? 1 : 0);
        values.put(IMAGE, imageString);
        values.put(MONEY, moneyEditText.getText().toString());
        values.put(CATEGORY, spinner.getSelectedItem().toString());
        values.put(DESCRIPTION, descriptionEditText.getText().toString());
        values.put(DATE, btnDate.getText().toString());
        values.put(TIME, btnTime.getText().toString());
        values.put(RECEIVER, receiverTextView.getText().toString());

        Log.d("SQLite_Save", "Inserting values into database: " + values.toString());

        long newRowId = db.insert(TABLE_NAME, null, values);

        if (newRowId != -1) {
            Log.d("SQLite_Save", "New row inserted with ID: " + newRowId);
        } else {
            Log.e("SQLite_Save", "Failed to insert row");
        }
    }//end addEvent

    DatePickerDialog.OnDateSetListener d = new DatePickerDialog.OnDateSetListener() {
        public void onDateSet(DatePicker view, int year, int monthOfYear,
                              int dayOfMonth) {
            myCalendar.set(Calendar.YEAR, year);
            myCalendar.set(Calendar.MONTH, monthOfYear);
            myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
            updateDateLabel();
        }
    };

    TimePickerDialog.OnTimeSetListener t = new TimePickerDialog.OnTimeSetListener() {
        public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
            myCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
            myCalendar.set(Calendar.MINUTE, minute);
            updateTimeLabel();
        }
    };

    private void updateTimeLabel() {
        Button timeBtn = findViewById(R.id.time_btn);
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
        timeBtn.setText(timeFormat.format(myCalendar.getTime()));
    }

    private void updateDateLabel() {
        Button dateBtn = findViewById(R.id.date_btn);
        // เปลี่ยนรูปแบบวันที่ให้แสดงปี พ.ศ.
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/", Locale.getDefault());
        String date = dateFormat.format(myCalendar.getTime());
        int yearCE = myCalendar.get(Calendar.YEAR);
        int yearBE = yearCE + 543; // แปลงปี ค.ศ. เป็น พ.ศ.
        dateBtn.setText(date + yearBE);
    }

    private void processSlipImage() {
        if (currentBitmap != null) {
            slipProcessor.processSlip(currentBitmap, new SlipProcessor.OnSlipProcessedListener() {
                @Override
                public void onSlipProcessed(TransferSlip slip) {
                    runOnUiThread(() -> {
                        // แยกวันที่และเวลา
                        String[] dateTimeParts = slip.getDateTime().split(" ");
                        if (dateTimeParts.length >= 2) {
                            try {
                                // แปลงรูปแบบวันที่
                                String dateStr = dateTimeParts[0];
                                String timeStr = dateTimeParts[1];

                                // อัพเดทค่าใน Button
                                Button dateInput = findViewById(R.id.date_btn);
                                Button timeInput = findViewById(R.id.time_btn);

                                dateInput.setText(dateStr);
                                timeInput.setText(timeStr);

                            } catch (Exception e) {
                                Log.e("MainActivity", "Error formatting date: " + e.getMessage());
                            }
                        }

                        // อัพเดทค่าผู้รับโอน
                        EditText receiverInput = findViewById(R.id.receiver);
                        receiverInput.setText(slip.getReceiver());

                        // อัพเดทจำนวนเงิน
                        EditText moneyInput = findViewById(R.id.add_money);
                        moneyInput.setText(String.format("%.2f", slip.getAmount()));
                    });
                }

                @Override
                public void onError(String error) {
                    runOnUiThread(() -> {
                        Toast.makeText(AddSlipActivity.this,
                                "เกิดข้อผิดพลาด: " + error,
                                Toast.LENGTH_LONG).show();
                    });
                }
            });
        }
    }

    class DecimalDigitsInputFilter implements InputFilter {
        private Pattern mPattern;
        DecimalDigitsInputFilter(int digits, int digitsAfterZero) {
            mPattern = Pattern.compile("[0-9]{0," + (digits - 1) + "}+((\\.[0-9]{0," + (digitsAfterZero - 1) +
                    "})?)||(\\.)?");
        }
        @Override
        public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
            Matcher matcher = mPattern.matcher(dest);
            if (!matcher.matches())
                return "";
            return null;
        }
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();

        if (id == R.id.money_cancel) {
            EditText moneyInput = findViewById(R.id.add_money);
            moneyInput.setText("");
        } else if (id == R.id.description_cancel) {
            EditText descriptionInput = findViewById(R.id.description);
            descriptionInput.setText("");
        } else if (id == R.id.date_cancel) {
            Button dateBtn = findViewById(R.id.date_btn);
            dateBtn.setText(R.string.date_format);
        } else if (id == R.id.time_cancel) {
            Button timeBtn = findViewById(R.id.time_btn);
            timeBtn.setText(R.string.time_format);
        } else if (id == R.id.receiver_cancel) {
            EditText receiverInput = findViewById(R.id.receiver);
            receiverInput.setText("");
        }
    }
}

================
File: app/src/main/java/com/example/finalproject/Constants.java
================
package com.example.finalproject;
import android.provider.BaseColumns;

public interface Constants extends BaseColumns {
    public static final String TABLE_NAME = "events";
    public static final String _ID = "_id";
    public static final String TYPE = "type";
    public static final String MONEY = "money";
    public static final String DATE = "date";
    public static final String TIME = "time";
    public static final String DESCRIPTION = "description";
    public static final String CATEGORY = "category";
    public static final String RECEIVER = "receiver";
    public static final String IMAGE = "image";
}

================
File: app/src/main/java/com/example/finalproject/EventsData.java
================
package com.example.finalproject;
import static android.provider.BaseColumns._ID;
import static android.provider.MediaStore.MediaColumns.TITLE;
import static com.example.finalproject.Constants.*;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class EventsData extends SQLiteOpenHelper {
    public EventsData(Context ctx){
        super(ctx, "events.db", null, 1);
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE " + TABLE_NAME + " ("
                + _ID +" INTEGER PRIMARY KEY AUTOINCREMENT, "
                + IMAGE + " TEXT, "
                + MONEY + " DOUBLE NOT NULL, "
                + TYPE + " INTEGER NOT NULL, "
                + CATEGORY + " TEXT NOT NULL, "
                + DESCRIPTION + " TEXT, "
                + DATE + " TEXT NOT NULL, "
                + TIME + " TEXT NOT NULL, "
                + RECEIVER + " TEXT);"  );
    }
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion){
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
        onCreate(db);
    }
}

================
File: app/src/main/java/com/example/finalproject/ListAdapter.java
================
package com.example.finalproject;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;

public class ListAdapter extends RecyclerView.Adapter<ListAdapter.ViewHolder> {
    private List<TransferSlip> dataSet;
    private MyClickListener mCallback;

    public ListAdapter(List<TransferSlip> myDataSet) {
        this.dataSet = myDataSet;
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.list_layout, parent, false);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        TransferSlip slip = dataSet.get(position);

        // Set category icon based on category name
        // TODO: Add proper category icons
        holder.categoryIcon.setImageResource(R.drawable.ic_launcher_foreground);

        // Set category name
        holder.categoryName.setText(slip.getCategory());

        // Set transaction note/description
        String description = slip.getDescription();
        if (description != null && !description.isEmpty()) {
            holder.transactionNote.setText(description);
        } else {
            holder.transactionNote.setText("ไม่มีบันทึกเพิ่มเติม");
        }

        // Set amount with proper formatting and color based on type
        String amount;
        if (slip.getType() == 1) { // รายรับ
            amount = String.format("+ %.2f ฿", slip.getAmount());
            holder.transactionAmount.setTextColor(holder.itemView.getContext()
                .getResources().getColor(android.R.color.holo_green_dark));
        } else { // รายจ่าย
            amount = String.format("- %.2f ฿", slip.getAmount());
            holder.transactionAmount.setTextColor(holder.itemView.getContext()
                .getResources().getColor(android.R.color.holo_red_dark));
        }
        holder.transactionAmount.setText(amount);
    }

    @Override
    public int getItemCount() {
        return dataSet.size();
    }

    public void setOnItemClickListener(MyClickListener listener) {
        this.mCallback = listener;
    }

    public interface MyClickListener {
        void onItemClick(int position, View v);
    }

    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
        ImageView categoryIcon;
        TextView categoryName;
        TextView transactionNote;
        TextView transactionAmount;

        public ViewHolder(View itemView) {
            super(itemView);
            categoryIcon = itemView.findViewById(R.id.categoryIcon);
            categoryName = itemView.findViewById(R.id.categoryName);
            transactionNote = itemView.findViewById(R.id.transactionNote);
            transactionAmount = itemView.findViewById(R.id.transactionAmount);
            itemView.setOnClickListener(this);
        }

        @Override
        public void onClick(View v) {
            if (mCallback != null) {
                mCallback.onItemClick(getAdapterPosition(), v);
            }
        }
    }
}

================
File: app/src/main/java/com/example/finalproject/MainActivity.java
================
package com.example.finalproject;

import static android.provider.BaseColumns._ID;
import static com.example.finalproject.Constants.*;

import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Button;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.widget.TextView;
import android.view.Gravity;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.formatter.ValueFormatter;
import com.google.android.material.bottomnavigation.BottomNavigationView;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MainActivity extends AppCompatActivity {
    private EventsData events;
    private LineChart chart;
    private TextView monthText;
    private TextView yearText;
    private int selectedMonth;
    private int selectedYear;
    private TextView remainAmountText;
    private TextView remainAmount;
    private TextView income;
    private TextView outcome;
    private RecyclerView recyclerView;
    private final String[] MONTHS = new String[]{"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
            "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.history);

        // Initialize views
        chart = findViewById(R.id.chart);
        monthText = findViewById(R.id.monthText);
        yearText = findViewById(R.id.yearText);
        remainAmountText = findViewById(R.id.remainAmountText);
        remainAmount = findViewById(R.id.remainAmount);
        income = findViewById(R.id.income);
        outcome = findViewById(R.id.outcome);
        
        // Initialize RecyclerView
        recyclerView = findViewById(R.id.recycler_view);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        
        // Initialize database
        events = new EventsData(MainActivity.this);
        
        setupNavigation();
        setupChart();
        
        BottomNavigationView bottomNav = findViewById(R.id.bottom_navigation);
        bottomNav.setOnNavigationItemSelectedListener(item -> {
            int itemId = item.getItemId();
            if (itemId == R.id.nav_home) {
                // จัดการนำทางไปหน้าหลัก
                return true;
            } else if (itemId == R.id.nav_history) {
                // จัดการนำทางไปหน้าประวัติ
                return true;
            } else if (itemId == R.id.nav_add) {
                // เปิดหน้าเพิ่มรายการ
                Intent intent = new Intent(this, AddSlipActivity.class);
                startActivity(intent);
                return true;
        }
            return false;
        });

        updateChartData();
    }

    private void setupNavigation() {
        Calendar calendar = Calendar.getInstance();
        selectedMonth = calendar.get(Calendar.MONTH);
        selectedYear = calendar.get(Calendar.YEAR) + 543;
        
        // หาข้อมูลที่ใกล้ปัจจุบันที่สุด
        findNearestData(selectedMonth, selectedYear);
        updateDisplayTexts();

        findViewById(R.id.prevYear).setOnClickListener(v -> {
            int newYear = findPreviousYearWithData(selectedYear);
            if (newYear != selectedYear) {
                selectedYear = newYear;
                selectedMonth = findLatestMonthWithData(selectedYear);
                updateDisplayTexts();
                updateChartData();
                Log.d("MainActivity", "Moved to: " + (selectedMonth + 1) + "/" + selectedYear);
            }
        });

        findViewById(R.id.nextYear).setOnClickListener(v -> {
            int newYear = findNextYearWithData(selectedYear);
            if (newYear != selectedYear) {
                selectedYear = newYear;
                selectedMonth = findEarliestMonthWithData(selectedYear);
                updateDisplayTexts();
                updateChartData();
                Log.d("MainActivity", "Moved to: " + (selectedMonth + 1) + "/" + selectedYear);
            }
        });

        findViewById(R.id.prevMonth).setOnClickListener(v -> {
            int newMonth = findPreviousMonthWithData(selectedYear, selectedMonth);
            if (newMonth == -1) {
                int newYear = findPreviousYearWithData(selectedYear);
                if (newYear != selectedYear) {
                    selectedYear = newYear;
                    selectedMonth = findLatestMonthWithData(selectedYear);
                }
            } else {
                selectedMonth = newMonth;
            }
            updateDisplayTexts();
            updateChartData();
            Log.d("MainActivity", "Moved to: " + (selectedMonth + 1) + "/" + selectedYear);
        });

        findViewById(R.id.nextMonth).setOnClickListener(v -> {
            int newMonth = findNextMonthWithData(selectedYear, selectedMonth);
            if (newMonth == -1) {
                int newYear = findNextYearWithData(selectedYear);
                if (newYear != selectedYear) {
                    selectedYear = newYear;
                    selectedMonth = findEarliestMonthWithData(selectedYear);
                }
            } else {
                selectedMonth = newMonth;
            }
            updateDisplayTexts();
            updateChartData();
            Log.d("MainActivity", "Moved to: " + (selectedMonth + 1) + "/" + selectedYear);
        });
    }

    private void findNearestData(int currentMonth, int currentYear) {
        SQLiteDatabase db = events.getReadableDatabase();
        String[] FROM = {_ID, DATE};
        String ORDER_BY = DATE + " DESC";
        Cursor cursor = db.query(TABLE_NAME, FROM, null, null, null, null, ORDER_BY);

        if (cursor != null && cursor.moveToFirst()) {
            String dateStr = cursor.getString(cursor.getColumnIndex(DATE));
            String[] dateParts = dateStr.split("/");
            selectedMonth = Integer.parseInt(dateParts[1]) - 1;
            selectedYear = Integer.parseInt(dateParts[2]);
            cursor.close();
        }
    }

    private int findPreviousYearWithData(int currentYear) {
        SQLiteDatabase db = events.getReadableDatabase();
        String[] FROM = {_ID};
        
        for (int year = currentYear - 1; year >= currentYear - 10; year--) {
            String selection = "substr(date, -4) = ?";
            String[] selectionArgs = {String.valueOf(year)};
            Cursor cursor = db.query(TABLE_NAME, FROM, selection, selectionArgs, null, null, null);
            
            if (cursor != null && cursor.getCount() > 0) {
                cursor.close();
                return year;
            }
            if (cursor != null) cursor.close();
        }
        return currentYear;
    }

    private int findNextYearWithData(int currentYear) {
        SQLiteDatabase db = events.getReadableDatabase();
        String[] FROM = {_ID};
        
        for (int year = currentYear + 1; year <= currentYear + 10; year++) {
            String selection = "substr(date, -4) = ?";
            String[] selectionArgs = {String.valueOf(year)};
            Cursor cursor = db.query(TABLE_NAME, FROM, selection, selectionArgs, null, null, null);
            
            if (cursor != null && cursor.getCount() > 0) {
                cursor.close();
                return year;
            }
            if (cursor != null) cursor.close();
        }
        return currentYear;
    }

    private int findPreviousMonthWithData(int year, int currentMonth) {
        String[] FROM = {_ID};
        SQLiteDatabase db = events.getReadableDatabase();
        
        for (int month = currentMonth - 1; month >= 0; month--) {
            String monthStr = String.format("%02d", month + 1);
            String selection = "substr(date, 4, 2) = ? AND substr(date, -4) = ?";
            String[] selectionArgs = {monthStr, String.valueOf(year)};
            Cursor cursor = db.query(TABLE_NAME, FROM, selection, selectionArgs, null, null, null);
            
            if (cursor != null && cursor.getCount() > 0) {
                cursor.close();
                return month;
            }
            if (cursor != null) cursor.close();
        }
        return -1;
    }

    private int findNextMonthWithData(int year, int currentMonth) {
        String[] FROM = {_ID};
        SQLiteDatabase db = events.getReadableDatabase();
        
        for (int month = currentMonth + 1; month < 12; month++) {
            String monthStr = String.format("%02d", month + 1);
            String selection = "substr(date, 4, 2) = ? AND substr(date, -4) = ?";
            String[] selectionArgs = {monthStr, String.valueOf(year)};
            Cursor cursor = db.query(TABLE_NAME, FROM, selection, selectionArgs, null, null, null);
            
            if (cursor != null && cursor.getCount() > 0) {
                cursor.close();
                return month;
            }
            if (cursor != null) cursor.close();
        }
        return -1;
    }

    private int findEarliestMonthWithData(int year) {
        return findNextMonthWithData(year, -1);
    }

    private int findLatestMonthWithData(int year) {
        return findPreviousMonthWithData(year, 12);
    }

    private void updateDisplayTexts() {
        TextView monthText = findViewById(R.id.monthText);
        TextView yearText = findViewById(R.id.yearText);
        
        String[] MONTHS = {"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
                "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"};
        
        monthText.setText(MONTHS[selectedMonth]);
        yearText.setText(String.valueOf(selectedYear));
    }

    private void setupChart() {
        chart.getDescription().setEnabled(false);
        chart.setTouchEnabled(true);
        chart.setDragEnabled(true);
        chart.setScaleEnabled(true);
        chart.setDrawGridBackground(false);
        chart.setPinchZoom(true);
        chart.setBackgroundColor(Color.WHITE);

        // Customize Y-Axis (Money)
        YAxis leftAxis = chart.getAxisLeft();
        leftAxis.setDrawGridLines(false);
        leftAxis.setAxisMinimum(0f);
        chart.getAxisRight().setEnabled(false);

        // Customize X-Axis (Days)
        XAxis xAxis = chart.getXAxis();
        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        xAxis.setDrawGridLines(false);
        xAxis.setGranularity(1f);
        xAxis.setValueFormatter(new ValueFormatter() {
            @Override
            public String getFormattedValue(float value) {
                return String.format("%d/%d", (int)value, selectedMonth + 1);
            }
        });
    }

    private void updateChartData() {
        Cursor cursor = getEvents();
        List<TransferSlip> slipList = new ArrayList<>();
        List<Entry> incomeEntries = new ArrayList<>();
        List<Entry> expenseEntries = new ArrayList<>();
        float maxMoney = 0f;
        float incomeMoney = 0f;
        float expenseMoney = 0f;

        if (cursor != null && cursor.moveToFirst()) {
            do {
                int type = cursor.getInt(cursor.getColumnIndex(TYPE));
                double money = cursor.getDouble(cursor.getColumnIndex(MONEY));
                String dateStr = cursor.getString(cursor.getColumnIndex(DATE));
                String timeStr = cursor.getString(cursor.getColumnIndex(TIME));
                String description = cursor.getString(cursor.getColumnIndex(DESCRIPTION));
                String category = cursor.getString(cursor.getColumnIndex(CATEGORY));
                String receiver = cursor.getString(cursor.getColumnIndex(RECEIVER));
                String image = cursor.getString(cursor.getColumnIndex(IMAGE));
                
                try {
                    String[] dateParts = dateStr.split("/");
                    int day = Integer.parseInt(dateParts[0]);
                    int month = Integer.parseInt(dateParts[1]);
                    int year = Integer.parseInt(dateParts[2]);

                    if (month == selectedMonth + 1 && year == selectedYear) {
                        // Create TransferSlip object and add to list
                        TransferSlip slip = new TransferSlip(
                            dateStr + " " + timeStr,
                            money,
                            "",  // sender
                            receiver,
                            description,
                            image,
                            category,
                            type
                        );
                        slipList.add(slip);

                        if (money > maxMoney) {
                            maxMoney = (float) money;
                        }

                        if (type == 1) {
                            incomeEntries.add(new Entry(day, (float) money));
                            incomeMoney += (float) money;
                        } else {
                            expenseEntries.add(new Entry(day, (float) money));
                            expenseMoney += (float) money;
                        }
                    }
                } catch (Exception e) {
                    Log.e("MainActivity", "Error parsing date: " + dateStr, e);
                }
            } while (cursor.moveToNext());
            
            // Update UI
            income.setText(String.format("%.2f", incomeMoney) + " ฿");
            outcome.setText(String.format("%.2f", expenseMoney) + " ฿");
            remainAmount.setText(String.format("%.2f", incomeMoney - expenseMoney) + " ฿");
            
            // Set adapter
            SlipAdapter adapter = new SlipAdapter(slipList);
            recyclerView.setAdapter(adapter);
            
            cursor.close();
        }

        // Update chart
        updateChartWithData(maxMoney, incomeEntries, expenseEntries);
    }

    private void updateChartWithData(float maxMoney, List<Entry> incomeEntries, List<Entry> expenseEntries) {
        chart.getAxisLeft().setAxisMaximum(maxMoney + 500f);
        chart.getAxisLeft().setAxisMinimum(0f);

        Calendar calendar = Calendar.getInstance();
        calendar.set(selectedYear - 543, selectedMonth, 1);
        int lastDay = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
        chart.getXAxis().setAxisMinimum(1f);
        chart.getXAxis().setAxisMaximum(lastDay);

        LineDataSet incomeDataSet = new LineDataSet(incomeEntries, "รายรับ");
        incomeDataSet.setColor(Color.GREEN);
        incomeDataSet.setCircleColor(Color.GREEN);
        incomeDataSet.setDrawValues(true);
        incomeDataSet.setDrawFilled(true);
        incomeDataSet.setFillColor(Color.GREEN);
        incomeDataSet.setFillAlpha(50);

        LineDataSet expenseDataSet = new LineDataSet(expenseEntries, "รายจ่าย");
        expenseDataSet.setColor(Color.RED);
        expenseDataSet.setCircleColor(Color.RED);
        expenseDataSet.setDrawValues(true);
        expenseDataSet.setDrawFilled(true);
        expenseDataSet.setFillColor(Color.RED);
        expenseDataSet.setFillAlpha(50);

        LineData lineData = new LineData(incomeDataSet, expenseDataSet);
        chart.setData(lineData);
        chart.invalidate();
    }

    private Cursor getEvents() {
        String[] FROM = {_ID, TYPE, MONEY, DATE, TIME, DESCRIPTION, CATEGORY, RECEIVER, IMAGE};
        String ORDER_BY = DATE + " ASC";
        SQLiteDatabase db = events.getReadableDatabase();
        
        // สร้างรูปแบบวันที่สำหรับการค้นหา
        String startDay = String.format("01/%02d/%d", selectedMonth + 1, selectedYear);
        
        Calendar calendar = Calendar.getInstance();
        calendar.set(selectedYear - 543, selectedMonth, 1);
        int lastDay = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
        String endDay = String.format("%02d/%02d/%d", lastDay, selectedMonth + 1, selectedYear);
        
        // ใช้การเปรียบเทียบวันที่โดยตรง
        String selection = "date BETWEEN ? AND ?";
        String[] selectionArgs = {startDay, endDay};
        
        Log.d("MainActivity", "Querying for dates between: " + startDay + " and " + endDay);
        
        return db.query(TABLE_NAME, FROM, selection, selectionArgs, null, null, ORDER_BY);
    }

    @Override
    protected void onResume() {
        super.onResume();
        updateChartData();
    }

    class DecimalDigitsInputFilter implements InputFilter {
        private Pattern mPattern;
        DecimalDigitsInputFilter(int digits, int digitsAfterZero) {
            mPattern = Pattern.compile("[0-9]{0," + (digits - 1) + "}+((\\.[0-9]{0," + (digitsAfterZero - 1) +
                    "})?)||(\\.)?");
        }
        @Override
        public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
            Matcher matcher = mPattern.matcher(dest);
            if (!matcher.matches())
                return "";
            return null;
        }
    }

    // Add this utility method to help with number formatting
    private String formatNumber(float number) {
        DecimalFormat df = new DecimalFormat("###,###,###,###.##");
        return df.format(number);
    }
}

================
File: app/src/main/java/com/example/finalproject/SlipAdapter.java
================
package com.example.finalproject;

import androidx.recyclerview.widget.RecyclerView;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import java.util.List;
import java.util.Calendar;
import androidx.recyclerview.widget.LinearLayoutManager;
import java.util.ArrayList;
import java.util.Map;
import java.util.Collections;
import java.util.HashMap;

public class SlipAdapter extends RecyclerView.Adapter<SlipAdapter.ViewHolder> {
    private List<TransferSlip> dataSet;
    private List<List<TransferSlip>> groupedSlips;
    private MyClickListener mCallback;

    public SlipAdapter(List<TransferSlip> myDataSet) {
        this.dataSet = myDataSet;
        groupSlipsByDate();
    }

    private void groupSlipsByDate() {
        groupedSlips = new ArrayList<>();
        Map<String, List<TransferSlip>> dateGroups = new HashMap<>();

        for (TransferSlip slip : dataSet) {
            String date = slip.getDateTime().split(" ")[0];
            if (!dateGroups.containsKey(date)) {
                dateGroups.put(date, new ArrayList<>());
            }
            dateGroups.get(date).add(slip);
        }

        List<String> sortedDates = new ArrayList<>(dateGroups.keySet());
        Collections.sort(sortedDates, Collections.reverseOrder());

        for (String date : sortedDates) {
            groupedSlips.add(dateGroups.get(date));
        }
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.card_layout, parent, false);
        return new ViewHolder(view);
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        List<TransferSlip> dailySlips = groupedSlips.get(position);
        TransferSlip firstSlip = dailySlips.get(0);

        String[] dateTimeComponents = firstSlip.getDateTime().split(" ");
        if (dateTimeComponents.length > 0) {
            String dateStr = dateTimeComponents[0];
            String[] dateComponents = dateStr.split("/");
            if (dateComponents.length >= 3) {
                holder.date.setText(dateComponents[0]);

                Calendar calendar = Calendar.getInstance();
                try {
                    int day = Integer.parseInt(dateComponents[0]);
                    int month = Integer.parseInt(dateComponents[1]) - 1;
                    int year = Integer.parseInt(dateComponents[2]) - 543;
                    calendar.set(year, month, day);

                    Calendar today = Calendar.getInstance();
                    if (calendar.get(Calendar.YEAR) == today.get(Calendar.YEAR) &&
                        calendar.get(Calendar.MONTH) == today.get(Calendar.MONTH) &&
                        calendar.get(Calendar.DAY_OF_MONTH) == today.get(Calendar.DAY_OF_MONTH)) {
                        holder.day.setText("วันนี้");
                    } else {
                        String[] thaiDays = {"อาทิตย์", "จันทร์", "อังคาร", "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"};
                        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK) - 1;
                        holder.day.setText("วัน" + thaiDays[dayOfWeek]);
                    }

                    String[] thaiMonths = {
                        "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
                        "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
                    };
                    String monthYear = thaiMonths[month] + " " + dateComponents[2];
                    if (dateTimeComponents.length > 1) {
                        monthYear += " " + dateTimeComponents[1];
                    }
                    holder.monthYearTime.setText(monthYear);

                    double totalIncome = 0;
                    double totalExpense = 0;
                    for (TransferSlip slip : dailySlips) {
                        if (slip.getType() == 1) { // รายรับ
                            totalIncome += slip.getAmount();
                        } else { // รายจ่าย
                            totalExpense += slip.getAmount();
                        }
                    }
                    double totalAmount = totalIncome - totalExpense;

                    // Set total amount with color
                    if (totalAmount >= 0) {
                        holder.totalAmountPerDay.setTextColor(holder.itemView.getContext()
                            .getResources().getColor(android.R.color.holo_green_dark));
                    } else {
                        holder.totalAmountPerDay.setTextColor(holder.itemView.getContext()
                            .getResources().getColor(android.R.color.holo_red_dark));
                    }
                    holder.totalAmountPerDay.setText(String.format("%.2f ฿", totalAmount));

                } catch (NumberFormatException e) {
                    Log.e("SlipAdapter", "Error parsing date: " + e.getMessage());
                    holder.day.setText("วันที่");
                    holder.monthYearTime.setText("เดือน/ปี");
                }
            }
        }

        holder.listAdapter = new ListAdapter(dailySlips);
        holder.listItemView.setAdapter(holder.listAdapter);
    }

    @Override
    public int getItemCount() {
        return groupedSlips.size();
    }

    public void setOnItemClickListener(MyClickListener listener) {
        this.mCallback = listener;
    }

    public interface MyClickListener {
        void onItemClick(int position, View v);
    }

    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
        TextView date;
        TextView day;
        TextView monthYearTime;
        TextView totalAmountPerDay;
        RecyclerView listItemView;
        ListAdapter listAdapter;

        public ViewHolder(View itemView) {
            super(itemView);
            date = itemView.findViewById(R.id.date);
            day = itemView.findViewById(R.id.day);
            monthYearTime = itemView.findViewById(R.id.monthYearTime);
            totalAmountPerDay = itemView.findViewById(R.id.totalAmountPerDay);
            listItemView = itemView.findViewById(R.id.list_item_view);
            
            listItemView.setLayoutManager(new LinearLayoutManager(itemView.getContext()));
            itemView.setOnClickListener(this);
        }

        @Override
        public void onClick(View v) {
            if (mCallback != null) {
                mCallback.onItemClick(getAdapterPosition(), v);
            }
        }
    }
}

================
File: app/src/main/java/com/example/finalproject/SlipParser.java
================
package com.example.finalproject;

import android.util.Log;

import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.time.Year;
import java.util.TreeMap;

public class SlipParser {
    private static final Map<String, String> MONTH_MAP = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
    private static final Set<String> THAI_MONTHS = new HashSet<>();
    static {
        MONTH_MAP.put("Jan", "01");
        MONTH_MAP.put("Feb", "02");
        MONTH_MAP.put("Mar", "03");
        MONTH_MAP.put("Apr", "04");
        MONTH_MAP.put("May", "05");
        MONTH_MAP.put("Jun", "06");
        MONTH_MAP.put("Jul", "07");
        MONTH_MAP.put("Aug", "08");
        MONTH_MAP.put("Sep", "09");
        MONTH_MAP.put("Oct", "10");
        MONTH_MAP.put("Nov", "11");
        MONTH_MAP.put("Dec", "12");

        //Map ภาษาไทย
        MONTH_MAP.put("U.A.", "01");
        MONTH_MAP.put("N.W.", "02");
        MONTH_MAP.put("Ū.A.", "03");
        MONTH_MAP.put("IU.8.", "04");
        MONTH_MAP.put("W.A.", "05");
        MONTH_MAP.put("U.J.", "06");
        MONTH_MAP.put("0.A.", "07");
        MONTH_MAP.put("A.N.", "08");
        MONTH_MAP.put("N.0.", "09");
        MONTH_MAP.put("1.A.", "10");
        MONTH_MAP.put("W.J.", "11");
        MONTH_MAP.put("S.A.", "12");
    }

    public static TransferSlip parseSlip(String text) {
        String dateTime = "";
        String time = "";
        double amount = 0.0;
        String sender = "";
        String receiver = "";

        Calendar currentCalendar = Calendar.getInstance();
        int currentYear = currentCalendar.get(Calendar.YEAR) + 543;

        Log.d("SlipParser", "Raw text: " + text);
        String[] lines = text.split("\n");

        // Pattern สำหรับวันที่
        Pattern datePattern = Pattern.compile(
                "(\\d{1,2})\\s*" +                          // วันที่
                        "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|" +
                        "U\\.A\\.|N\\.W\\.|U\\.A\\.|IU\\.8\\.|W\\.A\\.|U\\.J\\.|" +
                        "0\\.A\\.|A\\.N\\.|N\\.0\\.|1\\.A\\.|W\\.J\\.|S\\.A\\.)\\s*" +  // เดือน
                        "(\\d{2}|\\d{4})\\s*" +                    // ปี (2 หรือ 4 หลัก)
                        "(?:,\\s*)?"+                              // เครื่องหมายจุลภาคและช่องว่าง (อาจมีหรือไม่มีก็ได้)
                        "(\\d{1,2}:\\d{2})\\s*" +                 // เวลา
                        "(?:u\\.?)?",                             // u. ต่อท้าย (อาจมีหรือไม่มีก็ได้)
                Pattern.CASE_INSENSITIVE                   // ไม่สนใจตัวพิมพ์เล็ก-ใหญ่
        );

        // Pattern สำหรับจำนวนเงิน
        Pattern amountPattern = Pattern.compile("(\\d{1,3}(?:[.,]\\d{3})*[.]\\d{2})\\s*(?:Baht)?");

        // Pattern สำหรับชื่อที่มี MR. หรือขึ้นต้นด้วย MR
        Pattern namePattern = Pattern.compile(
                "(?:^|\\s+)" +
                        "(?:" +
                        "MR\\.|" +
                        "MRS\\.|" +
                        "MISS\\.|" +
                        "MS\\.|" +
                        "DR\\.|" +
                        "PROF\\.|" +
                        "REV\\.|" +
                        "Mr\\.|" +
                        "Mrs\\.|" +
                        "Miss\\.|" +
                        "Ms\\.|" +
                        "Dr\\.|" +
                        "Prof\\.|" +
                        "Rev\\.|" +
                        "MR|" +
                        "MRS|" +
                        "MISS|" +
                        "MS|" +
                        "DR|" +
                        "PROF|" +
                        "REV" +
                        ")\\s+" +
                        "([A-Za-z].+?)" +
                        "(?=\\s*$|\\s+(?:KBank|Bank|Transfer|Favorite|Banking|XXX|\\d))",
                Pattern.CASE_INSENSITIVE  // เพิ่ม flag เพื่อไม่สนใจตัวพิมพ์เล็ก-ใหญ่
        );

        boolean foundValidAmount = false;

        for (String line : lines) {
            line = line.trim();
            Log.d("SlipParser", "Processing line: " + line);

            // หาวันที่และเวลา
            Matcher dateMatcher = datePattern.matcher(line);
            if (dateMatcher.find()) {
                String day = dateMatcher.group(1);
                String month = MONTH_MAP.get(dateMatcher.group(2));
                String year = dateMatcher.group(3);
                time = dateMatcher.group(4);

                int fullYear;
                if (year.length() == 2) {
                    fullYear = 2000 + Integer.parseInt(year) + 543;
                    if(fullYear > currentYear){
                        fullYear -= 43;
                    }
                } else {
                    // ถ้าเป็นปี 4 หลัก (เช่น 2567)
                    fullYear = Integer.parseInt(year);
                }

                // จัดรูปแบบวันที่
                dateTime = String.format("%02d/%s/%d",
                        Integer.parseInt(day),
                        month,
                        fullYear
                );

                Log.d("SlipParser", "Parsed date: " + dateTime);
                Log.d("SlipParser", "Parsed time: " + time);
            }

            // หาจำนวนเงิน
            if (!foundValidAmount) {
                Matcher amountMatcher = amountPattern.matcher(line);
                while (amountMatcher.find() && !foundValidAmount) {
                    String amountStr = amountMatcher.group(1).trim();
                    try {
                        String processedAmount = amountStr;
                        int lastDotIndex = processedAmount.lastIndexOf('.');
                        if (lastDotIndex != -1) {
                            String decimal = processedAmount.substring(lastDotIndex);
                            processedAmount = processedAmount.substring(0, lastDotIndex).replaceAll("[.,]", "") + decimal;
                        }

                        double parsedAmount = Double.parseDouble(processedAmount);
                        Log.d("SlipParser", "Found amount: " + parsedAmount);
                        if (parsedAmount > 0) {
                            amount = parsedAmount;
                            foundValidAmount = true;
                            Log.d("SlipParser", "Selected first valid amount: " + amount);
                            break;
                        }
                    } catch (NumberFormatException e) {
                        Log.e("SlipParser", "Error parsing amount: " + amountStr, e);
                    }
                }
            }

            // หาชื่อ sender และ receiver
            Matcher nameMatcher = namePattern.matcher(line);
            if (nameMatcher.find()) {
                String foundName = nameMatcher.group(1).trim();
                Log.d("SlipParser", "Found name: " + foundName);

                if (sender.isEmpty()) {
                    sender = foundName;
                    Log.d("SlipParser", "Set sender: " + sender);
                } else if (receiver.isEmpty() && !foundName.equals(sender)) {
                    receiver = foundName;
                    Log.d("SlipParser", "Set receiver: " + receiver);
                }
            }
        }

        Log.d("SlipParser", String.format("Parsed: Date=%s, Time=%s, Amount=%.2f, Sender=%s, Receiver=%s",
                dateTime, time, amount, sender, receiver));

        return new TransferSlip(dateTime + " " + time, amount, sender, receiver);
    }
}

================
File: app/src/main/java/com/example/finalproject/SlipProcessor.java
================
package com.example.finalproject;

import android.graphics.Bitmap;

import com.google.mlkit.vision.common.InputImage;
import com.google.mlkit.vision.text.TextRecognition;
import com.google.mlkit.vision.text.TextRecognizer;
import com.google.mlkit.vision.text.latin.TextRecognizerOptions;

public class SlipProcessor {
    private TextRecognizer recognizer;

    public SlipProcessor() {
        recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS);
    }

    public void processSlip(Bitmap slipImage, OnSlipProcessedListener listener) {
        InputImage image = InputImage.fromBitmap(slipImage, 0);

        recognizer.process(image)
                .addOnSuccessListener(text -> {
                    TransferSlip slip = SlipParser.parseSlip(text.getText());
                    listener.onSlipProcessed(slip);
                })
                .addOnFailureListener(e -> {
                    listener.onError(e.getMessage());
                });
    }

    public interface OnSlipProcessedListener {
        void onSlipProcessed(TransferSlip slip);
        void onError(String error);
    }
}

================
File: app/src/main/java/com/example/finalproject/TransferSlip.java
================
package com.example.finalproject;

public class TransferSlip {
    private String dateTime;
    private int type;
    private double amount;
    private String sender;
    private String receiver;
    private String description;
    private String image;
    private String category;

    // Constructor with all fields
    public TransferSlip(String dateTime, double amount, String sender, String receiver, String description, String image, String category, int type) {
        this.dateTime = dateTime;
        this.amount = amount;
        this.sender = sender;
        this.receiver = receiver;
        this.description = description;
        this.image = image;
        this.category = category;
        this.type = type;
    }

    // Minimal constructor used by SlipParser
    public TransferSlip(String dateTime, double amount, String sender, String receiver) {
        this.dateTime = dateTime;
        this.amount = amount;
        this.sender = sender;
        this.receiver = receiver;
        this.description = "";
        this.image = "";
        this.category = "อื่นๆ"; // Default category
    }

    // Getters
    public String getDateTime() {
        return dateTime;
    }

    public int getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }

    public String getSender() {
        return sender;
    }

    public String getReceiver() {
        return receiver;
    }

    public String getDescription() {
        return description;
    }

    public String getImage() {
        return image;
    }

    public String getCategory() {
        return category;
    }

    // Setters
    public void setDateTime(String dateTime) {
        this.dateTime = dateTime;
    }

    public void setType(int type) {
        this.type = type;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public void setSender(String sender) {
        this.sender = sender;
    }

    public void setReceiver(String receiver) {
        this.receiver = receiver;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}

================
File: app/src/main/res/drawable/ic_add.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M13.5,8H12V13L16.28,15.54L17,14.33L13.5,12.25V8M13,3A9,9 0 0,0 4,12H1L4.96,16.03L9,12H6A7,7 0 0,1 13,5A7,7 0 0,1 20,12A7,7 0 0,1 13,19C11.07,19 9.32,18.21 8.06,16.94L6.64,18.36C8.27,20 10.5,21 13,21A9,9 0 0,0 22,12A9,9 0 0,0 13,3"/>
</vector>

================
File: app/src/main/res/drawable/ic_home.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z"/>
</vector>

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: app/src/main/res/layout/add_transactions.xml
================
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_gravity="center"
    tools:context=".MainActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:gravity="center"
            android:orientation="vertical">

            <ImageButton
                android:id="@+id/gallery_btn"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:src="@android:drawable/ic_menu_gallery"
                android:background="?attr/selectableItemBackgroundBorderless"
                android:contentDescription="@string/cancel"
                android:scaleType="centerCrop"
                tools:ignore="ImageContrastCheck,ImageContrastCheck" />

        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:padding="16dp">

            <View
                android:layout_width="0dp"
                android:layout_height="1dp"
                android:layout_weight="1"
                android:background="#CCCCCC"/>

            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="หรือ"
                android:paddingHorizontal="16dp"
                android:textColor="#666666"/>

            <View
                android:layout_width="0dp"
                android:layout_height="1dp"
                android:layout_weight="1"
                android:background="#CCCCCC"/>

        </LinearLayout>

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:gravity="center"
            android:layout_marginVertical="20dp">

            <RadioGroup
                android:id="@+id/radio_group"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="center"
                android:orientation="horizontal"
                >
                <RadioButton
                    android:id="@+id/radio_income"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:checked="false"
                    android:layout_marginHorizontal="20dp"
                    android:text="@string/income" />
                <RadioButton
                    android:id="@+id/radio_outcome"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginHorizontal="20dp"
                    android:text="@string/outcome" />
            </RadioGroup>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <ImageView
                        android:id="@+id/thb_icon"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:src="@mipmap/thb" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <EditText
                        android:id="@+id/add_money"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="5dp"
                        android:ems="10"
                        android:inputType="numberDecimal" />

                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <TextView
                        android:id="@+id/money_cancel"
                        android:gravity="center"
                        android:layout_width="wrap_content"
                        android:layout_height="match_parent"
                        android:layout_marginEnd="20dp"
                        android:textColor="@color/red"
                        android:onClick="onClick"
                        android:clickable="true"
                        android:text="@string/cancel" />

                </TableRow>
            </TableRow>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <ImageView
                        android:id="@+id/question_icon"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:layout_weight="0"
                        android:src="@mipmap/question" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <Spinner
                        android:id="@+id/type_spinner"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginHorizontal="20dp"
                        android:spinnerMode="dropdown" />
                </TableRow>

            </TableRow>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <ImageView
                        android:id="@+id/description_icon"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:src="@mipmap/text" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <EditText
                        android:id="@+id/description"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="5dp"
                        android:ems="10"
                        android:inputType="text" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <TextView
                        android:id="@+id/description_cancel"
                        android:gravity="center"
                        android:layout_width="wrap_content"
                        android:layout_height="match_parent"
                        android:layout_marginEnd="20dp"
                        android:textColor="@color/red"
                        android:onClick="onClick"
                        android:clickable="true"
                        android:text="@string/cancel" />

                </TableRow>

            </TableRow>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <ImageView
                        android:id="@+id/calendar_icon"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:src="@mipmap/calendar" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <Button
                        android:id="@+id/date_btn"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="5dp"
                        android:background="@android:color/transparent"
                        android:textColor="@color/black"
                        android:text="@string/date_format" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <TextView
                        android:id="@+id/date_cancel"
                        android:gravity="center"
                        android:layout_width="wrap_content"
                        android:layout_height="match_parent"
                        android:layout_marginEnd="20dp"
                        android:textColor="@color/red"
                        android:onClick="onClick"
                        android:clickable="true"
                        android:text="@string/cancel" />

                </TableRow>

            </TableRow>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent" >

                    <ImageView
                        android:id="@+id/time_icon"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:src="@mipmap/calendar" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <Button
                        android:id="@+id/time_btn"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="5dp"
                        android:background="@android:color/transparent"
                        android:textColor="@color/black"
                        android:text="@string/time_format" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <TextView
                        android:id="@+id/time_cancel"
                        android:gravity="center"
                        android:layout_width="wrap_content"
                        android:layout_height="match_parent"
                        android:layout_marginEnd="20dp"
                        android:textColor="@color/red"
                        android:onClick="onClick"
                        android:clickable="true"
                        android:text="@string/cancel" />

                </TableRow>

            </TableRow>

            <TableRow
                android:layout_width="wrap_content"
                android:layout_height="match_parent"
                android:paddingVertical="10dp">

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <ImageView
                        android:id="@+id/imageView2"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="20dp"
                        android:src="@mipmap/people" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="1">

                    <EditText
                        android:id="@+id/receiver"
                        android:layout_width="match_parent"
                        android:layout_height="match_parent"
                        android:layout_marginStart="20dp"
                        android:layout_marginEnd="5dp"
                        android:layout_weight="1"
                        android:ems="10"
                        android:inputType="text" />
                </TableRow>

                <TableRow
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0">

                    <TextView
                        android:id="@+id/receiver_cancel"
                        android:gravity="center"
                        android:layout_width="wrap_content"
                        android:layout_height="match_parent"
                        android:layout_marginEnd="20dp"
                        android:textColor="@color/red"
                        android:onClick="onClick"
                        android:clickable="true"
                        android:text="@string/cancel" />

                </TableRow>

            </TableRow>
        </TableLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:orientation="vertical">

            <Button
                android:id="@+id/submit_btn"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginVertical="20dp"
                android:text="Submit" />
        </LinearLayout>

    </LinearLayout>

</ScrollView>

================
File: app/src/main/res/layout/card_layout.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:cardview="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/card_view"
    android:layout_gravity="center"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:foreground="?android:selectableItemBackground"
    android:layout_margin="12dp"
    cardview:cardCornerRadius="8dp"
    cardview:cardBackgroundColor="#FEFEFE"
    cardview:cardElevation="2dp"
    cardview:contentPadding="3dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="8dp">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:gravity="center_vertical"
                android:orientation="horizontal"
                android:padding="8dp">

                <TextView
                    android:id="@+id/date"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="26"
                    android:textSize="24sp"
                    android:textStyle="bold" />

                <LinearLayout
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="16dp"
                    android:layout_marginEnd="16dp"
                    android:layout_weight="1"
                    android:orientation="vertical">

                    <TextView
                        android:id="@+id/day"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="วันที่"
                        android:textSize="16sp" />

                    <TextView
                        android:id="@+id/monthYearTime"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:text="เดือน"
                        android:textSize="14sp" />
                </LinearLayout>

                <TextView
                    android:id="@+id/totalAmountPerDay"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="0 ฿"
                    android:textSize="18sp"
                    android:textStyle="bold" />

            </LinearLayout>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="?android:attr/listDivider"/>

            <androidx.recyclerview.widget.RecyclerView
                android:id="@+id/list_item_view"
                android:scrollbars="vertical"
                android:layout_width="match_parent"
                android:layout_height="match_parent" />

        </LinearLayout>

    </LinearLayout>
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/layout/history.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <ScrollView
        android:id="@+id/main"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginBottom="56dp">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:padding="8dp">

                <!-- Year Selection -->
                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:orientation="horizontal"
                    android:padding="4dp">

                    <ImageButton
                        android:id="@+id/prevYear"
                        android:layout_width="48dp"
                        android:layout_height="48dp"
                        android:background="?attr/selectableItemBackgroundBorderless"
                        android:src="@android:drawable/ic_media_previous" />

                    <TextView
                        android:id="@+id/yearText"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="24dp"
                        android:textSize="18sp"
                        android:textStyle="bold" />

                    <ImageButton
                        android:id="@+id/nextYear"
                        android:layout_width="48dp"
                        android:layout_height="48dp"
                        android:background="?attr/selectableItemBackgroundBorderless"
                        android:src="@android:drawable/ic_media_next" />
                </LinearLayout>

                <!-- Month Selection -->
                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:orientation="horizontal"
                    android:padding="4dp">

                    <ImageButton
                        android:id="@+id/prevMonth"
                        android:layout_width="48dp"
                        android:layout_height="48dp"
                        android:background="?attr/selectableItemBackgroundBorderless"
                        android:src="@android:drawable/ic_media_previous" />

                    <TextView
                        android:id="@+id/monthText"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginHorizontal="24dp"
                        android:textSize="18sp"
                        android:textStyle="bold" />

                    <ImageButton
                        android:id="@+id/nextMonth"
                        android:layout_width="48dp"
                        android:layout_height="48dp"
                        android:background="?attr/selectableItemBackgroundBorderless"
                        android:src="@android:drawable/ic_media_next" />
                </LinearLayout>
            </LinearLayout>

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:orientation="vertical">

                <TableLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:padding="16dp">

                    <TextView
                        android:id="@+id/remainAmountText"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_span="2"
                        android:layout_weight="1"
                        android:gravity="center"
                        android:text="ยอดคงเหลือ" />


                    <TextView
                        android:id="@+id/remainAmount"
                        android:layout_width="0dp"
                        android:layout_height="wrap_content"
                        android:layout_span="2"
                        android:layout_weight="1"
                        android:gravity="center"
                        android:text="0 ฿" />

                    <TableRow
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_marginTop="8dp">

                        <TextView
                            android:id="@+id/incomeText"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:gravity="center"
                            android:text="รายรับสุทธิ" />

                        <TextView
                            android:id="@+id/outcomeText"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:gravity="center"
                            android:text="รายจ่ายสุทธิ" />
                    </TableRow>

                    <TableRow
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content">

                        <TextView
                            android:id="@+id/income"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:gravity="center"
                            android:text="0 ฿" />

                        <TextView
                            android:id="@+id/outcome"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:gravity="center"
                            android:text="0 ฿" />
                    </TableRow>
                </TableLayout>

                <!-- Add divider after statistics section -->
                <View
                    android:layout_width="match_parent"
                    android:layout_height="1dp"
                    android:background="?android:attr/listDivider"/>

                <com.github.mikephil.charting.charts.LineChart
                    android:id="@+id/chart"
                    android:layout_width="match_parent"
                    android:layout_height="300dp"
                    android:layout_margin="16dp" />

                <TableLayout
                    android:id="@+id/tableContent"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:stretchColumns="*" />

                <androidx.recyclerview.widget.RecyclerView
                    android:id="@+id/recycler_view"
                    android:scrollbars="vertical"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent" />

            </LinearLayout>

        </LinearLayout>
    </ScrollView>

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottom_navigation"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        android:background="?android:attr/windowBackground"
        app:itemBackground="@null"
        app:itemIconTint="@null"
        app:labelVisibilityMode="labeled"
        app:menu="@menu/bottom_nav_menu" />

</androidx.coordinatorlayout.widget.CoordinatorLayout>

================
File: app/src/main/res/layout/list_layout.xml
================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:cardview="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/list_view"
    android:layout_gravity="center"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:foreground="?android:selectableItemBackground"
    android:layout_margin="12dp"
    cardview:cardCornerRadius="8dp"
    cardview:cardBackgroundColor="#FEFEFE"
    cardview:cardElevation="2dp"
    cardview:contentPadding="3dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="8dp">

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:padding="8dp"
                android:gravity="center_vertical">

                <ImageView
                    android:id="@+id/categoryIcon"
                    android:layout_width="48dp"
                    android:layout_height="48dp"
                    android:padding="4dp"
                    tools:srcCompat="@tools:sample/avatars" />

                <LinearLayout
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:orientation="vertical"
                    android:layout_marginStart="16dp">

                    <TextView
                        android:id="@+id/categoryName"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textSize="16sp"
                        android:textStyle="bold"
                        android:text="ชื่อหมวดหมู่" />

                    <TextView
                        android:id="@+id/transactionNote"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:textSize="14sp"
                        android:text="บันทึกเพิ่มเติม" />
                </LinearLayout>

                <TextView
                    android:id="@+id/transactionAmount"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:textSize="16sp"
                    android:textStyle="bold"
                    android:layout_marginStart="8dp"
                    android:text="0 ฿" />

            </LinearLayout>

        </LinearLayout>

    </LinearLayout>
</androidx.cardview.widget.CardView>

================
File: app/src/main/res/menu/bottom_nav_menu.xml
================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/nav_home"
        android:icon="@drawable/ic_home"
        android:title="หน้าหลัก"
        app:showAsAction="ifRoom"/>
    <item
        android:id="@+id/nav_add"
        android:icon="@drawable/ic_add"
        android:title="เพิ่มรายการ"
        app:showAsAction="ifRoom"/>
    <item
        android:id="@+id/nav_history"
        android:icon="@drawable/ic_history"
        android:title="ประวัติ"
        app:showAsAction="ifRoom"/>
</menu>

================
File: app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="red">#ED1111</color>
</resources>

================
File: app/src/main/res/values-night/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<resources>
    <string name="app_name">Final project</string>
    <string name="date_format">dd/mm/yyyy</string>
    <string name="time_format">HH:mm</string>
    <string name="income">รายรับ</string>
    <string name="outcome">รายจ่าย</string>
    <string name="cancel">X</string>
    <string-array name="types_array">
        <item>อื่นๆ</item>
        <item>อาหาร/เครื่องดื่ม</item>
        <item>ช็อปปิ้ง</item>
        <item>ครอบครัว/ส่วนตัว</item>
        <item>ออมเงิน/ลงทุน</item>
        <item>ชำระบิล</item>
        <item>บันเทิง</item>
        <item>ของขวัญ/บริจาค</item>
        <item>ค่าเดินทาง</item>
        <item>การศึกษา</item>
        <item>โรงแรม/ท่องเที่ยว</item>
        <item>ประกัน</item>
        <item>ถอนเงิน</item>
        <item>สินเชื่อ/เช่าซื้อ</item>
    </string-array>
</resources>

================
File: app/src/main/res/values/themes.xml
================
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.FinalProject" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.FinalProject" parent="Base.Theme.FinalProject" />
</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/test/java/com/example/finalproject/ExampleUnitTest.java
================
package com.example.finalproject;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class ExampleUnitTest {
    @Test
    public void addition_isCorrect() {
        assertEquals(4, 2 + 2);
    }
}

================
File: build.gradle
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
alias(libs.plugins.android.application) apply false
}

================
File: .gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.5.2"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
appcompat = "1.7.0"
material = "1.12.0"
activity = "1.9.2"
constraintlayout = "2.1.4"
playServicesMlkitTextRecognitionCommon = "19.1.0"

[libraries]
junit = { group = "junit", name = "junit", version.ref = "junit" }
ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
play-services-mlkit-text-recognition-common = { group = "com.google.android.gms", name = "play-services-mlkit-text-recognition-common", version.ref = "playServicesMlkitTextRecognitionCommon" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Sat Oct 26 17:14:00 ICT 2024
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: settings.gradle
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

rootProject.name = "Final project"
include ':app'
